.data
line:       .space 80
prompt:     .asciiz "Enter a line to be echoed.\n"
nl:         .asciiz "\n"
s:          .asciiz "%s"

            .text
            .globl main
main:
                              # Print the prompt.
            la $a0, s         # Starting address of %s.
            la $a1, prompt    # Starting address of string.
            jal printf

                              # Read the input.
            la $a0, line      # Starting address of buffer.
            li $a1, 80        # Length of buffer.
            li $a2, 0         # stdin.
            jal fgets         # Call fgets.

                              # Print a newline.
            la $a0, s         # Starting address of %s.
            la $a1, nl
            jal printf

                              # Now, let's reverse the string.

            la $s0, line      # $s0 points to beginning of line.

            la $s1, line      # So does $s1, for now.

                              # We want $s1 pointing to the '\n' at the
                              # end of the line.
while1:                       
            lb $t0, 0($s1)
            beq $t0, 10, ewhile1
            addi $s1, $s1, 1
            b while1
ewhile1:
            addi $s1, $s1, -1 # Now, $s1 points to the last character
                              # of the line.

                              # Ok, $s0 points to the beginning of the
                              # line and $s1 points to the end.  Start
                              # swapping characters to reverse the string.
while2:
            bge $s0, $s1, ewhile2
            lb $t0, 0($s0)
            lb $t1, 0($s1)
            sb $t0, 0($s1)
            sb $t1, 0($s0)
            addi $s0, $s0, 1
            addi $s1, $s1, -1
            b while2
ewhile2:
                              # Print the reversed string.
            la $a0, s         # Starting address of %s.
            la $a1, line
            jal printf

                              # Return to startup code.
            li $v0, 0         # Return value is zero.
            jr $ra
